@page "/swim/upload"
@layout MainLayout
@using System.Globalization
@using System.Text
@using FluentValidation
@using Microsoft.EntityFrameworkCore
@using SwimRadar.Components.Layout
@using SwimRadar.Data
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudForm Model="@_model"
             @bind-IsValid="_isValid"
             @bind-IsTouched="_isTouched"
             Validation="@_validationRules.ValidateValue">
        <MudItem xs="12">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                           @ref="@_fileUpload"
                           @bind-Files="_model.Files"
                           For="@(() => _model.Files)"
                           AppendMultipleFiles
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                           InputStyle="opacity:0"
                           ErrorText="@string.Empty"
                           Accept=".mp4"
                           tabindex="-1"
                           @ondrop="@ClearDragClass"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Height="300px"
                              Outlined="true"
                              Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop files here or click
                        </MudText>
                        @foreach (var file in _model.Files?.Select(file => file.Name) ?? [])
                        {
                            <MudChip T="string" Color="Color.Dark" Text="@file" />
                        }
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters="@false"
                        Class="relative d-flex justify-end gap-4">
                <MudButton Color="Color.Primary"
                           OnClick="@OpenFilePickerAsync"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton Color="Color.Primary"
                           Disabled="@(!_isValid || !_isTouched || _model.Files is null || !_model.Files.Any())"
                           OnClick="@Upload"
                           Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton Color="Color.Error"
                           Disabled="@(_model.Files is null || !_model.Files.Any())"
                           OnClick="@ClearAsync"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem>
            @if (_fileUpload?.ValidationErrors.Any() ?? false)
            {
                <MudText Color="Color.Error"
                         Typo="@Typo.caption">
                    @_fileUpload?.ValidationErrors[0]
                </MudText>
            }
        </MudItem>
        <MudItem xs="12">
            IsValid: @_isValid - IsTouched: @_isTouched
        </MudItem>
        <MudSelect Style="max-width: 300px;" @bind-Value="_user.Name" Label="Select fast-food" HelperText="String" Placeholder="Please Select" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
            @foreach (var user in ApplicationUsers)
            {
                <MudSelectItem Value="@user.Name">@user.Name</MudSelectItem>
            }
        </MudSelect>
    </MudForm>
</MudStack>

@code {
#nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model =  new();
    private ModelFluentValidator _validationRules;
    private MudFileUpload<IReadOnlyList<IBrowserFile>> _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private List<ApplicationUser> ApplicationUsers;

    [Inject] 
    private ApplicationDbContext Context { get; set; }

    public ApplicationUser _user { get; set; }
    protected override void OnInitialized()
    {
        ApplicationUsers = Context!.Users.ToList();
        _user = ApplicationUsers.First();
        _validationRules = new ModelFluentValidator(Context);
        base.OnInitialized();
    }

    private async Task Upload()
    {
        // Upload the files here
        foreach (IBrowserFile fileUploadFile in _fileUpload.Files)
        {
                await using Stream openReadStream = fileUploadFile.OpenReadStream();
                var directory = $"/Data/{_user.Name?.ToLower(CultureInfo.CurrentCulture)}";
                var path = Path.Combine(directory, fileUploadFile.Name);
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }
                FileStream fileStream = File.Create(path);
                await openReadStream.CopyToAsync(fileStream);
                fileStream.Close();
                
                Context.UploadRecords.Add(new UploadRecord()
                {
                    DateTime = DateTime.Now,
                    FileName = fileUploadFile.Name,
                    FileSize = fileUploadFile.Size,
                    Id = Guid.NewGuid(),
                    UploadPath = path,
                });
                await Context.SaveChangesAsync();
        }

        await _fileUpload.ClearAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Uploaded successfully", Severity.Success);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator(ApplicationDbContext dbContext)
        {
            RuleFor(x => x.Files).CustomAsync(async (model, context, cancellationToken) =>
            {
                if (model is null)
                {
                    return;
                }
                StringBuilder error = new StringBuilder();
                foreach (IBrowserFile browserFile in model)
                {
                    if (await dbContext.UploadRecords.AnyAsync(x => x.FileName == browserFile.Name && x.FileSize == browserFile.Size))
                    {
                        error.AppendLine($"File '{browserFile.Name}' already exists in the database.");
                    }
                }

                var errorMessage = error.ToString();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    context.AddFailure(errorMessage);
                }
            });

        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}