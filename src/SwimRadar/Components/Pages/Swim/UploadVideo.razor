@page "/swim/upload"
@layout MainLayout
@using System.Globalization
@using System.Text
@using FluentValidation
@using Microsoft.EntityFrameworkCore
@using SwimRadar.Components.Account
@using SwimRadar.Components.Layout
@using SwimRadar.Data
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudForm Model="@_model"
             @bind-IsValid="_isValid"
             @bind-IsTouched="_isTouched"
             Validation="@_validationRules.ValidateValue">
        <MudItem xs="12">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                           @ref="@_fileUpload"
                           @bind-Files="_model.Files"
                           For="@(() => _model.Files)"
                           AppendMultipleFiles
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                           InputStyle="opacity:0"
                           ErrorText="@string.Empty"
                           Accept=".mp4"
                           tabindex="-1"
                           @ondrop="@ClearDragClass"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Height="300px"
                              Outlined="true"
                              Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop files here or click
                        </MudText>
                        @foreach (var file in _model.Files?.Select(file => file.Name) ?? [])
                        {
                            <MudChip T="string" Color="Color.Dark" Text="@file"/>
                        }
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters="@false"
                        Class="relative d-flex justify-end gap-4">
                <MudButton Color="Color.Primary"
                           OnClick="@OpenFilePickerAsync"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton Color="Color.Primary"
                           Disabled="@(!_isValid || !_isTouched || _model.Files is null || !_model.Files.Any())"
                           OnClick="@Upload"
                           Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton Color="Color.Error"
                           Disabled="@(_model.Files is null || !_model.Files.Any())"
                           OnClick="@ClearAsync"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem>
            @if (_fileUpload?.ValidationErrors.Any() ?? false)
            {
                <MudText Color="Color.Error"
                         Typo="@Typo.caption">
                    @_fileUpload?.ValidationErrors[0]
                </MudText>
            }
        </MudItem>
        <MudItem xs="12">
            IsValid: @_isValid - IsTouched: @_isTouched
        </MudItem>
        <MudSelect Style="max-width: 300px;" @bind-Value="_user.Name" Label="Select fast-food" HelperText="String"
                   Placeholder="Please Select" AdornmentIcon="@Icons.Material.Filled.Fastfood"
                   AdornmentColor="Color.Primary">
            @foreach (var user in _applicationUsers)
            {
                <MudSelectItem Value="@user.Name">@user.Name</MudSelectItem>
            }
        </MudSelect>
    </MudForm>
    <MudText Typo="Typo.h4">Upload Record</MudText>
    <MudDataGrid Items="@UploadRecords" Filterable="false" SortMode="@SortMode.None" Groupable="false">
        <Columns>
            <PropertyColumn Property="x => x.FileName"/>
            <PropertyColumn Property="x => x.FileSize" />
            <PropertyColumn Property="x => x.DateTime" Title="CrateTime"/>
            <PropertyColumn Property="x => x.UploadPath" Title="Save Path"/>
        </Columns>
    </MudDataGrid>
</MudStack>

@code {
#nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private readonly Model _model = new();
    private ModelFluentValidator _validationRules;
    private MudFileUpload<IReadOnlyList<IBrowserFile>> _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private List<ApplicationUser>? _applicationUsers;

    [Inject]
    private ApplicationDbContext Context { get; set; }

    [Inject]
    private IdentityUserAccessor UserAccessor { get; set; }

    private ApplicationUser? _user { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    public IEnumerable<UploadRecord> UploadRecords;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _applicationUsers = Context!.Users.ToList();
        if (_applicationUsers.Any() && authState.User.Identity is { IsAuthenticated: true })
        {
            _user = _applicationUsers.FirstOrDefault(x => x.UserName == authState.User.Identity.Name);
        }
        else
        {
            _user = _applicationUsers.First();
        }

        _validationRules = new ModelFluentValidator(Context);
        UploadRecords = await Context.UploadRecords.ToListAsync();
    }

    private async Task Upload()
    {
        if (_user == null)
        {
            Snackbar.Add("please login first.", Severity.Error);
            return;
        }
        
        // Upload the files here
        foreach (IBrowserFile fileUploadFile in _fileUpload.Files!)
        {
            await using Stream openReadStream = fileUploadFile.OpenReadStream();
            var directory = $"/Data/{_user.Name?.ToLower(CultureInfo.CurrentCulture)}";
            var path = Path.Combine(directory, fileUploadFile.Name).Replace("\\", "/");
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            FileStream fileStream = File.Create(path);
            await openReadStream.CopyToAsync(fileStream);
            fileStream.Close();

            Context.UploadRecords.Add(new UploadRecord()
            {
                DateTime = DateTime.Now,
                FileName = fileUploadFile.Name,
                FileSize = fileUploadFile.Size,
                Id = Guid.NewGuid(),
                UploadPath = path,
            });
            await Context.SaveChangesAsync();
            
            // 创建 SwimVideo 对象
            var swimVideo = new SwimVideo
            {
                FileName = fileUploadFile.Name,
                FileSize = fileUploadFile.Size,
                FilePath = path
            };

            // 添加到数据库
            Context.SwimVideos.Add(swimVideo);
        }

        await _fileUpload.ClearAsync();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Uploaded successfully", Severity.Success);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator(ApplicationDbContext dbContext)
        {
            RuleFor(x => x.Files).CustomAsync(async (model, context, cancellationToken) =>
            {
                if (model is null)
                {
                    return;
                }

                StringBuilder error = new StringBuilder();
                foreach (IBrowserFile browserFile in model)
                {
                    if (await dbContext.UploadRecords.AnyAsync(x => x.FileName == browserFile.Name && x.FileSize == browserFile.Size))
                    {
                        error.AppendLine($"File '{browserFile.Name}' already exists in the database.");
                    }
                }

                var errorMessage = error.ToString();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    context.AddFailure(errorMessage);
                }
            });
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? [] : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}